from grid import Grid
from cell import Cell, CellState


class State(CellState):
    def __init__(self, value: int) -> None:
        super().__init__(value)


ALLOWED_DIMENSIONALITIES = [1]
INITIAL_CELL_STATE = State(0)
RULE_000 = "00000000"
RULE_001 = "00000001"
RULE_002 = "00000010"
RULE_003 = "00000011"
RULE_004 = "00000100"
RULE_005 = "00000101"
RULE_006 = "00000110"
RULE_007 = "00000111"
RULE_008 = "00001000"
RULE_009 = "00001001"
RULE_010 = "00001010"
RULE_011 = "00001011"
RULE_012 = "00001100"
RULE_013 = "00001101"
RULE_014 = "00001110"
RULE_015 = "00001111"
RULE_016 = "00010000"
RULE_017 = "00010001"
RULE_018 = "00010010"
RULE_019 = "00010011"
RULE_020 = "00010100"
RULE_021 = "00010101"
RULE_022 = "00010110"
RULE_023 = "00010111"
RULE_024 = "00011000"
RULE_025 = "00011001"
RULE_026 = "00011010"
RULE_027 = "00011011"
RULE_028 = "00011100"
RULE_029 = "00011101"
RULE_030 = "00011110"
RULE_031 = "00011111"
RULE_032 = "00100000"
RULE_033 = "00100001"
RULE_034 = "00100010"
RULE_035 = "00100011"
RULE_036 = "00100100"
RULE_037 = "00100101"
RULE_038 = "00100110"
RULE_039 = "00100111"
RULE_040 = "00101000"
RULE_041 = "00101001"
RULE_042 = "00101010"
RULE_043 = "00101011"
RULE_044 = "00101100"
RULE_045 = "00101101"
RULE_046 = "00101110"
RULE_047 = "00101111"
RULE_048 = "00110000"
RULE_049 = "00110001"
RULE_050 = "00110010"
RULE_051 = "00110011"
RULE_052 = "00110100"
RULE_053 = "00110101"
RULE_054 = "00110110"
RULE_055 = "00110111"
RULE_056 = "00111000"
RULE_057 = "00111001"
RULE_058 = "00111010"
RULE_059 = "00111011"
RULE_060 = "00111100"
RULE_061 = "00111101"
RULE_062 = "00111110"
RULE_063 = "00111111"
RULE_064 = "01000000"
RULE_065 = "01000001"
RULE_066 = "01000010"
RULE_067 = "01000011"
RULE_068 = "01000100"
RULE_069 = "01000101"
RULE_070 = "01000110"
RULE_071 = "01000111"
RULE_072 = "01001000"
RULE_073 = "01001001"
RULE_074 = "01001010"
RULE_075 = "01001011"
RULE_076 = "01001100"
RULE_077 = "01001101"
RULE_078 = "01001110"
RULE_079 = "01001111"
RULE_080 = "01010000"
RULE_081 = "01010001"
RULE_082 = "01010010"
RULE_083 = "01010011"
RULE_084 = "01010100"
RULE_085 = "01010101"
RULE_086 = "01010110"
RULE_087 = "01010111"
RULE_088 = "01011000"
RULE_089 = "01011001"
RULE_090 = "01011010"
RULE_091 = "01011011"
RULE_092 = "01011100"
RULE_093 = "01011101"
RULE_094 = "01011110"
RULE_095 = "01011111"
RULE_096 = "01100000"
RULE_097 = "01100001"
RULE_098 = "01100010"
RULE_099 = "01100011"
RULE_100 = "01100100"
RULE_101 = "01100101"
RULE_102 = "01100110"
RULE_103 = "01100111"
RULE_104 = "01101000"
RULE_105 = "01101001"
RULE_106 = "01101010"
RULE_107 = "01101011"
RULE_108 = "01101100"
RULE_109 = "01101101"
RULE_110 = "01101110"
RULE_111 = "01101111"
RULE_112 = "01110000"
RULE_113 = "01110001"
RULE_114 = "01110010"
RULE_115 = "01110011"
RULE_116 = "01110100"
RULE_117 = "01110101"
RULE_118 = "01110110"
RULE_119 = "01110111"
RULE_120 = "01111000"
RULE_121 = "01111001"
RULE_122 = "01111010"
RULE_123 = "01111011"
RULE_124 = "01111100"
RULE_125 = "01111101"
RULE_126 = "01111110"
RULE_127 = "01111111"
RULE_128 = "10000000"
RULE_129 = "10000001"
RULE_130 = "10000010"
RULE_131 = "10000011"
RULE_132 = "10000100"
RULE_133 = "10000101"
RULE_134 = "10000110"
RULE_135 = "10000111"
RULE_136 = "10001000"
RULE_137 = "10001001"
RULE_138 = "10001010"
RULE_139 = "10001011"
RULE_140 = "10001100"
RULE_141 = "10001101"
RULE_142 = "10001110"
RULE_143 = "10001111"
RULE_144 = "10010000"
RULE_145 = "10010001"
RULE_146 = "10010010"
RULE_147 = "10010011"
RULE_148 = "10010100"
RULE_149 = "10010101"
RULE_150 = "10010110"
RULE_151 = "10010111"
RULE_152 = "10011000"
RULE_153 = "10011001"
RULE_154 = "10011010"
RULE_155 = "10011011"
RULE_156 = "10011100"
RULE_157 = "10011101"
RULE_158 = "10011110"
RULE_159 = "10011111"
RULE_160 = "10100000"
RULE_161 = "10100001"
RULE_162 = "10100010"
RULE_163 = "10100011"
RULE_164 = "10100100"
RULE_165 = "10100101"
RULE_166 = "10100110"
RULE_167 = "10100111"
RULE_168 = "10101000"
RULE_169 = "10101001"
RULE_170 = "10101010"
RULE_171 = "10101011"
RULE_172 = "10101100"
RULE_173 = "10101101"
RULE_174 = "10101110"
RULE_175 = "10101111"
RULE_176 = "10110000"
RULE_177 = "10110001"
RULE_178 = "10110010"
RULE_179 = "10110011"
RULE_180 = "10110100"
RULE_181 = "10110101"
RULE_182 = "10110110"
RULE_183 = "10110111"
RULE_184 = "10111000"
RULE_185 = "10111001"
RULE_186 = "10111010"
RULE_187 = "10111011"
RULE_188 = "10111100"
RULE_189 = "10111101"
RULE_190 = "10111110"
RULE_191 = "10111111"
RULE_192 = "11000000"
RULE_193 = "11000001"
RULE_194 = "11000010"
RULE_195 = "11000011"
RULE_196 = "11000100"
RULE_197 = "11000101"
RULE_198 = "11000110"
RULE_199 = "11000111"
RULE_200 = "11001000"
RULE_201 = "11001001"
RULE_202 = "11001010"
RULE_203 = "11001011"
RULE_204 = "11001100"
RULE_205 = "11001101"
RULE_206 = "11001110"
RULE_207 = "11001111"
RULE_208 = "11010000"
RULE_209 = "11010001"
RULE_210 = "11010010"
RULE_211 = "11010011"
RULE_212 = "11010100"
RULE_213 = "11010101"
RULE_214 = "11010110"
RULE_215 = "11010111"
RULE_216 = "11011000"
RULE_217 = "11011001"
RULE_218 = "11011010"
RULE_219 = "11011011"
RULE_220 = "11011100"
RULE_221 = "11011101"
RULE_222 = "11011110"
RULE_223 = "11011111"
RULE_224 = "11100000"
RULE_225 = "11100001"
RULE_226 = "11100010"
RULE_227 = "11100011"
RULE_228 = "11100100"
RULE_229 = "11100101"
RULE_230 = "11100110"
RULE_231 = "11100111"
RULE_232 = "11101000"
RULE_233 = "11101001"
RULE_234 = "11101010"
RULE_235 = "11101011"
RULE_236 = "11101100"
RULE_237 = "11101101"
RULE_238 = "11101110"
RULE_239 = "11101111"
RULE_240 = "11110000"
RULE_241 = "11110001"
RULE_242 = "11110010"
RULE_243 = "11110011"
RULE_244 = "11110100"
RULE_245 = "11110101"
RULE_246 = "11110110"
RULE_247 = "11110111"
RULE_248 = "11111000"
RULE_249 = "11111001"
RULE_250 = "11111010"
RULE_251 = "11111011"
RULE_252 = "11111100"
RULE_253 = "11111101"
RULE_254 = "11111110"
RULE_255 = "11111111"


def tf(*tfargs) -> Grid:

    prev_gen_grid: Grid = tfargs[0]
    wolfram_rule: str = tfargs[1]

    next_gen_grid: Grid = Grid(dimensions=prev_gen_grid.dimensions)

    # For each cell's location in the previous generation's grid
    for location in range(prev_gen_grid.dimensions[0]):

        # Check its left and right neighbor locations (with wrapping) as well as itself
        # If any is not set, substitute it for the initial value
        rule_char = 0
        left = ((location - 1) % prev_gen_grid.dimensions[0],)
        try: rule_char += prev_gen_grid.cells[left].state.value
        except: rule_char += INITIAL_CELL_STATE.value

        rule_char <<= 1
        try: rule_char += prev_gen_grid.cells[(location,)].state.value
        except: rule_char += INITIAL_CELL_STATE.value

        rule_char <<= 1
        right = ((location + 1) % prev_gen_grid.dimensions[0],)
        try: rule_char += prev_gen_grid.cells[right].state.value
        except: rule_char += INITIAL_CELL_STATE.value

        # Get the corresponding value based on the chosen wolfram string rule
        # The string rule is made of characters each corresponding to the combination of current cells values
        cell_value = int(wolfram_rule[-(rule_char + 1)])

        # Finally, create a new cell with the State object initialized with the value from the wolfram rule
        next_gen_cell = Cell(State(cell_value))

        # And add it to the grid ONLY IF its state is not the initial state (since un-added cells are initial by default)
        # Remove this if you want your zeroes to appear
        # if next_gen_cell.state.value != INITIAL_CELL_STATE.value:
        next_gen_grid.add_cell_at(next_gen_cell, (location,))

    return next_gen_grid
